{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","_ref","totalCounters","console","log","react_default","a","createElement","className","href","Counter","state","_this2","this","Fragment","getBadgeClasses","formatCount","onClick","props","onIncrement","counter","onDecrement","onDelete","id","prevProps","prevState","classes","value","number","Component","Counters","_this$props","counters","onReset","map","components_counter","key","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleReset","c","setState","handleDecrement","toConsumableArray","index","indexOf","objectSpread","handleIncrement","handleDelete","counterId","filter","navbar","length","components_counters","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.18ed529e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst NavBar = ( { totalCounters } ) => {\r\n\r\n    console.log(\"NavBar - Rendered\");\r\n    \r\n    return ( \r\n        <div>\r\n                <nav className = \"navbar navbar-light bg-light\">\r\n\t\t\t\t\t<a className = \"nav-brand\" href = \"#\">\r\n\t\t\t\t\tNavBar\r\n                    <span className = \"badge badge-pill badge-secondary m-2\"> { totalCounters } </span>\r\n\t\t\t\t\t</a>\r\n\t\t\t\t</nav>\r\n            </div>\r\n     );\r\n}\r\n \r\nexport default NavBar;\r\n\r\n// class NavBar extends Component {\r\n//     state = {  }\r\n//     render() { \r\n//         return ( \r\n//             <div>\r\n//                 <nav className = \"navbar navbar-light bg-light\">\r\n// \t\t\t\t\t<a className = \"nav-brand\" href = \"#\">\r\n// \t\t\t\t\tNavBar\r\n//                     <span className = \"badge badge-pill badge-secondary m-2\">{this.props.totalCounters}</span>\r\n// \t\t\t\t\t</a>\r\n// \t\t\t\t</nav>\r\n//             </div>\r\n//          );\r\n//     }\r\n// }\r\n \r\n// export default NavBar;","import React, { Component } from 'react';\r\n\r\nclass Counter extends Component {\r\n    state = { \r\n        // value : this.props.counter.value,\r\n        // tags : [ \"tag1\", \"tag2\", \"tag3\" ]\r\n     }\r\n    render() { \r\n\r\n        console.log(\"Counter - Rendered\");\r\n    \r\n        return (\r\n            <React.Fragment>\r\n                <div>\r\n                <span  className = {this.getBadgeClasses()}>{this.formatCount()}</span>\r\n\t\t\t\t<button onClick = {() => this.props.onIncrement(this.props.counter)} className = \"btn btn-secondary btn-sm\">+</button>\r\n                <button onClick = {() => this.props.onDecrement(this.props.counter)} className = \"btn btn-secondary btn-sm m-2\">-</button>\r\n\t\t\t\t<button onClick = {() => this.props.onDelete(this.props.counter.id)} className = \"btn btn-danger btn-sm\">Delete</button>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n\r\n    // handleIncrement = products => {\r\n    //     console.log(products);\r\n    //     this.setState( { value : this.state.value +1} );\r\n    // }\r\n\r\n    componentDidUpdate (prevProps, prevState) {\r\n\t\tconsole.log(\"Previous Props\", prevProps);\r\n\t\tconsole.log(\"Previous State\", prevState);\r\n\t\t/*if (prevProps.counters.value !== props.counters.value) {\r\n\t\tPerhaps we can make an Ajax call from the server \r\n\t\t}*/\r\n\t}\r\n\r\n\r\n    componentWillUnmount () {\r\n\t\tconsole.log(\"Counter - Unmounted\");\r\n\t\t}\r\n\r\n    \r\n    getBadgeClasses() {\r\n        let classes = \"badge m-2 badge-\";\r\n        classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\r\n        return classes;\r\n    }\r\n\r\n    formatCount() {\r\n        const { value } = this.props.counter;\r\n        var number = value;\r\n        if (number < 1) {\r\n            number = 0;\r\n            return <h6> Zero </h6>;\r\n        }\r\n        else {\r\n            return number;\r\n        }\r\n        // return value === 0 ? <h6> Zero </h6> : value;\r\n    }\r\n}\r\n \r\nexport default Counter;","import React, { Component } from 'react';\r\nimport Counter from './counter';\r\n\r\nclass Counters extends Component {\r\n    // state = { \r\n    //     counters : [\r\n    //         {id: 1, value: 0},\r\n    //         {id: 2, value: 0},\r\n    //         {id: 3, value: 0},\r\n    //         {id: 4, value: 0}\r\n    //     ]\r\n    //  };\r\n\r\n    render() { \r\n\r\n        console.log(\"Counters - Rendered\");\r\n\r\n        const { counters, onReset, onDelete, onIncrement, onDecrement } = this.props;\r\n\r\n        return ( \r\n            <div>\r\n                <button onClick = {onReset} className = \"btn btn-primary btn-sm m-2\">Reset</button>\r\n                {counters.map( counter => ( <Counter onDelete = {onDelete} onIncrement = {onIncrement} onDecrement = {onDecrement} counter = { counter } key = { counter.id} >\r\n                <h3> Counter #{ counter.id } </h3>\r\n                </Counter>))}\r\n            </div>\r\n         );\r\n    }\r\n\r\n    // handleReset = () => {\r\n\t// \tconst counters = this.state.counters.map(c => {\r\n\t// \t\t\tc.value = 0;\r\n\t// \t\t\treturn c; \r\n\t// \t\t});\r\n\t// \tthis.setState( { counters } );\r\n\t// };\r\n    \r\n    // handleIncrement = counter => {\r\n\t// \tconst counters = [...this.state.counters];\r\n\t// \tconst index = counters.indexOf(counter);\r\n\t// \tcounters[index] = { ...counter };\r\n\t// \tcounters[index].value++;\r\n\t// \tthis.setState( { counters } );\r\n\t// };\r\n\r\n    \r\n    // handleDelete = counterId => {\r\n    //     const counters = this.state.counters.filter(c => c.id !== counterId);\r\n\t// \tthis.setState( { counters } );\r\n    // }\r\n}\r\n \r\nexport default Counters;","import React, { Component } from 'react';\nimport './App.css';\nimport NavBar from './components/navbar';\nimport Counters from './components/counters';\n\nclass App extends Component {\n\n  state = { \n    counters : [\n        {id: 1, value: 0},\n        {id: 2, value: 0},\n        {id: 3, value: 0},\n        {id: 4, value: 0}\n    ]\n };\n\n  render() {\n    \n    console.log(\"App - Rendered\");\n\n    return ( \n      <React.Fragment>\n        <NavBar totalCounters = {this.state.counters.filter(c => c.value > 0).length} />\n\t\t\t\t<main className = \"container\">\n\t\t\t\t\t<Counters onDelete = { this.handleDelete } onIncrement = { this.handleIncrement } onDecrement = { this.handleDecrement } onReset = {this.handleReset} counters = { this.state.counters } key = { this.state.counters.id} />\n\t\t\t\t</main>\n      </React.Fragment>\n    );\n  }\n\n  constructor() {\n\t\tsuper();\n\t\tconsole.log(\"App - Constructor\");\n\t}\n\t\t\n\tcomponentDidMount() {\n\t\tconsole.log(\"App - Mounted\");\n\t}\n\n\n  handleReset = () => {\n\t\tconst counters = this.state.counters.map(c => {\n\t\t\t\tc.value = 0;\n\t\t\t\treturn c; \n\t\t\t});\n\t\tthis.setState( { counters } );\n\t};\n    \n  handleDecrement = counter => {\n\t\tconst counters = [...this.state.counters];\n\t\tconst index = counters.indexOf(counter);\n\t\tcounters[index] = { ...counter };\n\t\tcounters[index].value--;\n\t\tthis.setState( { counters } );\n\t};  \n  \n  handleIncrement = counter => {\n\t\tconst counters = [...this.state.counters];\n\t\tconst index = counters.indexOf(counter);\n\t\tcounters[index] = { ...counter };\n\t\tcounters[index].value++;\n\t\tthis.setState( { counters } );\n\t};\n\n    \n    handleDelete = counterId => {\n        const counters = this.state.counters.filter(c => c.id !== counterId);\n\t\tthis.setState( { counters } );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}